generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]  @relation("BoardOwner")
  widgets     Widget[]
  memberships   BoardMember[]
  createdStickyNotes StickyNote[] @relation("UserCreatedStickyNotes")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

model Board {
  id          String        @id @default(cuid())
  title       String
  description String?
  ownerId     String
  owner       User          @relation("BoardOwner", fields: [ownerId], references: [id])
  members     BoardMember[]
  stickyNotes StickyNote[]
  widgets     Widget[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model BoardMember {
  id        String   @id @default(cuid())
  userId    String
  boardId   String
  user      User     @relation(fields: [userId], references: [id])
  board     Board    @relation(fields: [boardId], references: [id])
  role      Role     @default(VIEWER)
  createdAt DateTime @default(now())

  @@unique([userId, boardId])
}

model StickyNote {
  id        String   @id @default(cuid())
  content   String?
  color     String   @default("yellow")
  positionX Float    @default(0)
  positionY Float    @default(0)
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdBy String
  creator   User     @relation("UserCreatedStickyNotes", fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Widget {
  id        String   @id @default(cuid())
  type      WidgetType
  data      Json     // Store properties specific to the widget type
  positionX Float    @default(0)
  positionY Float    @default(0)
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdBy String
  creator   User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WidgetType {
  SHAPE
  LINE
  TEXT
  IMAGE
  STICKY_NOTE
  OTHER
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}
